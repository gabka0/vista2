






// PRISMA DETAILS
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}



// We have our SQL here, We use a cloud based infrastructure as previously confirmed with Professor 
// We wrote our SQL first and then we wrote the corresponnding prisma
// ALL our queries use raw SQL based on this format 
// We are cloud-based but we use SQL througout our project
/*
-- CreateTable
CREATE TABLE "User" (
    "email" TEXT NOT NULL,
    "password" TEXT NOT NULL DEFAULT '',
    "user_id" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    "displayName" TEXT,
    "full_Name" TEXT NOT NULL DEFAULT 'Unknown',
    "user_info" TEXT
);

-- CreateTable
CREATE TABLE "UserSettings" (
    "user_id" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    "currency" TEXT NOT NULL DEFAULT 'USD',
    "dark_mode" BOOLEAN NOT NULL DEFAULT true,
    CONSTRAINT "UserSettings_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "User" ("user_id") ON DELETE RESTRICT ON UPDATE CASCADE
);

-- CreateTable
CREATE TABLE "Coin" (
    "coin_id" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    "name" TEXT NOT NULL,
    "symbol" TEXT NOT NULL,
    "cmc_rank" INTEGER NOT NULL,
    "last_updated" DATETIME NOT NULL,
    "market_cap" REAL NOT NULL,
    "percent_change_24h" REAL NOT NULL,
    "percent_change_7d" REAL NOT NULL,
    "price" REAL NOT NULL,
    "slug" TEXT NOT NULL,
    "volume_24h" REAL NOT NULL
);

-- CreateTable
CREATE TABLE "HistoricalCoin" (
    "id" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    "coin_id" INTEGER NOT NULL,
    "date" DATETIME NOT NULL,
    "open" REAL NOT NULL,
    "high" REAL NOT NULL,
    "low" REAL NOT NULL,
    "close" REAL NOT NULL,
    "volume" REAL NOT NULL,
    CONSTRAINT "HistoricalCoin_coin_id_fkey" FOREIGN KEY ("coin_id") REFERENCES "Coin" ("coin_id") ON DELETE RESTRICT ON UPDATE CASCADE
);

-- CreateTable
CREATE TABLE "PortfolioEntry" (
    "entry_id" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    "amount" REAL NOT NULL,
    "user_id" INTEGER NOT NULL,
    "coin_id" INTEGER NOT NULL,
    CONSTRAINT "PortfolioEntry_coin_id_fkey" FOREIGN KEY ("coin_id") REFERENCES "Coin" ("coin_id") ON DELETE RESTRICT ON UPDATE CASCADE,
    CONSTRAINT "PortfolioEntry_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "User" ("user_id") ON DELETE RESTRICT ON UPDATE CASCADE
);

-- CreateTable
CREATE TABLE "TrackRecord" (
    "track_record_id" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    "amount" REAL NOT NULL,
    "action" TEXT NOT NULL,
    "datetime" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "user_id" INTEGER NOT NULL,
    "coin_id" INTEGER NOT NULL,
    CONSTRAINT "TrackRecord_coin_id_fkey" FOREIGN KEY ("coin_id") REFERENCES "Coin" ("coin_id") ON DELETE RESTRICT ON UPDATE CASCADE,
    CONSTRAINT "TrackRecord_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "User" ("user_id") ON DELETE RESTRICT ON UPDATE CASCADE
);

-- CreateTable
CREATE TABLE "Alert" (
    "alert_id" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    "floor_price" INTEGER,
    "ceiling_price" INTEGER,
    "user_id" INTEGER NOT NULL,
    "coin_id" INTEGER NOT NULL,
    CONSTRAINT "Alert_coin_id_fkey" FOREIGN KEY ("coin_id") REFERENCES "Coin" ("coin_id") ON DELETE RESTRICT ON UPDATE CASCADE,
    CONSTRAINT "Alert_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "User" ("user_id") ON DELETE RESTRICT ON UPDATE CASCADE
);

-- CreateTable
CREATE TABLE "FriendRequest" (
    "request_id" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    "sender_id" INTEGER NOT NULL,
    "receiver_id" INTEGER NOT NULL,
    "status" TEXT NOT NULL DEFAULT 'pending',
    "timestamp" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT "FriendRequest_receiver_id_fkey" FOREIGN KEY ("receiver_id") REFERENCES "User" ("user_id") ON DELETE RESTRICT ON UPDATE CASCADE,
    CONSTRAINT "FriendRequest_sender_id_fkey" FOREIGN KEY ("sender_id") REFERENCES "User" ("user_id") ON DELETE RESTRICT ON UPDATE CASCADE
);

-- CreateIndex
CREATE UNIQUE INDEX "User_email_key" ON "User"("email");

-- CreateIndex
CREATE UNIQUE INDEX "Coin_symbol_key" ON "Coin"("symbol");

-- CreateIndex
CREATE INDEX "HistoricalCoin_coin_id_fkey" ON "HistoricalCoin"("coin_id");

-- CreateIndex
CREATE INDEX "PortfolioEntry_coin_id_fkey" ON "PortfolioEntry"("coin_id");

-- CreateIndex
CREATE UNIQUE INDEX "PortfolioEntry_user_id_coin_id_key" ON "PortfolioEntry"("user_id", "coin_id");

-- CreateIndex
CREATE INDEX "TrackRecord_coin_id_fkey" ON "TrackRecord"("coin_id");

-- CreateIndex
CREATE INDEX "TrackRecord_user_id_fkey" ON "TrackRecord"("user_id");

-- CreateIndex
CREATE INDEX "Alert_coin_id_fkey" ON "Alert"("coin_id");

-- CreateIndex
CREATE INDEX "Alert_user_id_fkey" ON "Alert"("user_id");

-- CreateIndex
CREATE INDEX "FriendRequest_receiver_id_fkey" ON "FriendRequest"("receiver_id");

-- CreateIndex
CREATE INDEX "FriendRequest_sender_id_fkey" ON "FriendRequest"("sender_id");

*/
// prisma corresponding


enum FriendRequestStatus {
  pending
  accepted
  declined
}

model User {
  user_id       Int           @id @default(autoincrement())
  email         String        @unique
  password      String        @default("")
  displayName   String?
  full_Name     String        @default("Unknown") // Add a temporary default
  user_info     String?       // ðŸ†• Optional field for user bio/info

  settings         UserSettings?
  portfolio        PortfolioEntry[]
  alerts           Alert[]
  records          TrackRecord[]
  sentRequests     FriendRequest[] @relation("SentRequests")
  receivedRequests FriendRequest[] @relation("ReceivedRequests")
}
model UserSettings {
  user_id   Int     @id
  currency  String  @default("USD")
  dark_mode Boolean @default(true)

  user User @relation(fields: [user_id], references: [user_id])
}
model Coin {
  coin_id              Int              @id @default(autoincrement())
  name                 String
  symbol               String           @unique
  slug                 String
  cmc_rank             Int
  price                Float
  market_cap           Float
  volume_24h           Float
  percent_change_24h   Float
  percent_change_7d    Float
  last_updated         DateTime

  portfolio PortfolioEntry[] // one-to-many
  alerts    Alert[]
  records   TrackRecord[]
  historical HistoricalCoin[]
}

model HistoricalCoin {
  id         Int      @id @default(autoincrement())
  coin_id    Int
  date       DateTime
  open       Float
  high       Float
  low        Float
  close      Float
  volume     Float
  coin       Coin     @relation(fields: [coin_id], references: [coin_id])
}

model PortfolioEntry {
  entry_id Int   @id @default(autoincrement())
  amount   Float

  user_id  Int
  coin_id  Int

  user     User @relation(fields: [user_id], references: [user_id])
  coin     Coin @relation(fields: [coin_id], references: [coin_id])

  @@unique([user_id, coin_id], name: "userId_coinId") // each user can only have one entry per coin
}

model TrackRecord {
  track_record_id Int      @id @default(autoincrement())
  amount          Float
  action          String
  datetime        DateTime @default(now())

  user_id Int
  coin_id Int

  user    User @relation(fields: [user_id], references: [user_id])
  coin    Coin @relation(fields: [coin_id], references: [coin_id])
}

model Alert {
  alert_id      Int @id @default(autoincrement())
  floor_price   Int?
  ceiling_price Int?

  user_id Int
  coin_id Int

  user    User @relation(fields: [user_id], references: [user_id])
  coin    Coin @relation(fields: [coin_id], references: [coin_id])
}

model FriendRequest {
  request_id   Int      @id @default(autoincrement())
  sender_id    Int
  receiver_id  Int
  status       FriendRequestStatus @default(pending)
  timestamp    DateTime @default(now())

  sender   User @relation("SentRequests", fields: [sender_id], references: [user_id])
  receiver User @relation("ReceivedRequests", fields: [receiver_id], references: [user_id])
}